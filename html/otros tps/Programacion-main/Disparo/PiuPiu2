import pygame
import random
import time

# Inicialización de Pygame
pygame.init()

# Dimensiones de la ventana
ANCHO = 800
ALTO = 600

# Colores
BLANCO = (255, 255, 255)
ROJO = (255, 0, 0)

# Clase Enemigo
class Enemigo(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.image.load("enemigo.png").convert_alpha()
        self.image = pygame.transform.scale(self.image, (80, 80))
        self.rect = self.image.get_rect()
        self.rect.x = random.randint(0, ANCHO - self.rect.width)
        self.rect.y = -self.rect.height
        self.vel_y = random.randint(1, 3)
        
    def update(self):
        self.rect.y += self.vel_y
        if self.rect.y > ALTO:
            self.kill()

# Clase Protagonista
class Protagonista(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.image.load("pixil-frame-0.png").convert_alpha()
        self.image = pygame.transform.scale(self.image, (80, 80))
        self.rect = self.image.get_rect()
        self.rect.centerx = ANCHO // 2
        self.rect.bottom = ALTO - 10
        self.vel_x = 5
        self.puede_disparar = True
        self.tiempo_ultimo_disparo = 0
        
    def update(self):
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT] or keys[pygame.K_a]:
            self.rect.x -= self.vel_x
        if keys[pygame.K_RIGHT] or keys[pygame.K_d]:
            self.rect.x += self.vel_x
        self.rect.x = max(0, min(self.rect.x, ANCHO - self.rect.width))
        
        if keys[pygame.K_SPACE] and self.puede_disparar:
            self.puede_disparar = False
            self.tiempo_ultimo_disparo = pygame.time.get_ticks()
            bala = Bala(self.rect.centerx, self.rect.top)
            todos_los_sprites.add(bala)
            balas.add(bala)
    
    def puede_disparar_nuevamente(self):
        tiempo_actual = pygame.time.get_ticks()
        return tiempo_actual - self.tiempo_ultimo_disparo > 300
    
# Clase Bala
class Bala(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = pygame.image.load("bala.png").convert_alpha()
        self.image = pygame.transform.scale(self.image, (15, 20))
        self.rect = self.image.get_rect()
        self.rect.centerx = x
        self.rect.bottom = y
        self.vel_y = -10
        
    def update(self):
        self.rect.y += self.vel_y
        if self.rect.bottom < 0:
            self.kill()

# Clase MensajeGameover
class MensajeGameover(pygame.sprite.Sprite):
    def __init__(self, puntuacion):
        super().__init__()
        self.image = pygame.Surface((ANCHO, ALTO))
        self.image.fill(BLANCO)
        self.rect = self.image.get_rect()
        fuente = pygame.font.Font(None, 48)
        mensaje = fuente.render("Se acabó", True, ROJO)
        puntuacion_texto = fuente.render(f"Puntuación: {puntuacion}", True, ROJO)
        self.image.blit(mensaje, (ANCHO // 2 - mensaje.get_width() // 2, ALTO // 2 - mensaje.get_height()))
        self.image.blit(puntuacion_texto, (ANCHO // 2 - puntuacion_texto.get_width() // 2, ALTO // 2))
        self.tiempo_inicio = time.time()

    def update(self):
        if time.time() - self.tiempo_inicio > 7:
            pygame.quit()

# Configuración de la ventana
ventana = pygame.display.set_mode((ANCHO, ALTO))
pygame.display.set_caption("Esquiva los Enemigos")

# Grupos de sprites
todos_los_sprites = pygame.sprite.Group()
enemigos = pygame.sprite.Group()
balas = pygame.sprite.Group()
protagonista = Protagonista()
mensaje_gameover = None

todos_los_sprites.add(protagonista)

# Reloj para controlar el tiempo
reloj = pygame.time.Clock()

# Bucle principal del juego
puntuacion = 0
game_over = False
tiempo_colision = None

while not game_over:
    for evento in pygame.event.get():
        if evento.type == pygame.QUIT:
            game_over = True
    
    # Crear enemigo aleatorio
    if random.random() < 0.02:
        enemigo = Enemigo()
        todos_los_sprites.add(enemigo)
        enemigos.add(enemigo)
        
    # Actualizar sprites
    todos_los_sprites.update()
    
    # Comprobar colisiones entre balas y enemigos
    colisiones_balas_enemigos = pygame.sprite.groupcollide(balas, enemigos, True, True)
    puntuacion += len(colisiones_balas_enemigos)
    
    # Comprobar colisiones entre protagonista y enemigos
    colisiones_protagonista_enemigos = pygame.sprite.spritecollide(protagonista, enemigos, True)
    
    # Actualizar estado de disparo del protagonista
    if protagonista.puede_disparar_nuevamente() and pygame.key.get_pressed()[pygame.K_SPACE]:
        protagonista.puede_disparar = True
    
    # Game over
    if colisiones_protagonista_enemigos:
        if tiempo_colision is None:
            tiempo_colision = time.time()
            mensaje_gameover = MensajeGameover(puntuacion)
            todos_los_sprites.add(mensaje_gameover)
        elif time.time() - tiempo_colision > 7:
            game_over = True
    
    # Dibujar
    ventana.fill(BLANCO)
    todos_los_sprites.draw(ventana)
    
    # Mostrar puntuación en tiempo real
    fuente_puntuacion = pygame.font.Font(None, 36)
    texto_puntuacion = fuente_puntuacion.render(f"Puntuación: {puntuacion}", True, ROJO)
    ventana.blit(texto_puntuacion, (10, 10))
    
    pygame.display.flip()
    reloj.tick(60)

pygame.quit()
